// Code generated by MockGen. DO NOT EDIT.
// Source: core/businesses/userBusiness.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	requests "github.com/TulioGuaraldoB/cross-roads/core/dtos/requests"
	gomock "github.com/golang/mock/gomock"
)

// MockIUserBusiness is a mock of IUserBusiness interface.
type MockIUserBusiness struct {
	ctrl     *gomock.Controller
	recorder *MockIUserBusinessMockRecorder
}

// MockIUserBusinessMockRecorder is the mock recorder for MockIUserBusiness.
type MockIUserBusinessMockRecorder struct {
	mock *MockIUserBusiness
}

// NewMockIUserBusiness creates a new mock instance.
func NewMockIUserBusiness(ctrl *gomock.Controller) *MockIUserBusiness {
	mock := &MockIUserBusiness{ctrl: ctrl}
	mock.recorder = &MockIUserBusinessMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserBusiness) EXPECT() *MockIUserBusinessMockRecorder {
	return m.recorder
}

// LoginUser mocks base method.
func (m *MockIUserBusiness) LoginUser(ctx context.Context, credentials *requests.Credentials) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", ctx, credentials)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockIUserBusinessMockRecorder) LoginUser(ctx, credentials interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockIUserBusiness)(nil).LoginUser), ctx, credentials)
}
